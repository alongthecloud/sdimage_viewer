import 'package:flutter/material.dart';
import 'package:markdown_viewer/markdown_viewer.dart';
import 'package:simple_logger/simple_logger.dart';
import 'package:url_launcher/url_launcher.dart';
import '../model/AppPath.dart';

class HelpView extends StatelessWidget {
  const HelpView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text("Help")),
        body: SingleChildScrollView(
            child: Container(
                margin: const EdgeInsets.all(24),
                child: _helpDocument(context))));
  }

  Widget _helpDocument(BuildContext context) {
    String outputDirPath = AppPath().outputDirPath;
    String markdownDocument = """
  ## About this app
  This app shows images generated by StableDiffusion (A1111) with meta-data.

  https://github.com/alongthecloud/sdimage_viewer

  ### Functions of buttons
| Icon | |
|--|--|
|![help](icon://0e309) | Show this help |
|![settings](icon://0e57f) | Show the settings dialog |
|![save](icon://0e550) | Save the current image specific path ($outputDirPath) |
|![open-shell](icon://0e45a) | Open the current image in Explorer or Finder |

  ### Keyboard shortcuts
  * The Left Arrow, Right Arrow, Home, and End Key moves to the previous image, next image, first image, and last image.
  * The Up arrow key moves to an image 10 steps previous, The Down arrow key moves to an image 10 steps next.

  ### Used flutter libraries
  desktop_drop, window_manager, path_provider, clipboard, oktoast, expandable_text, provider, settings_ui, easy_dialogs, file_picker, image, json_serializer, markdown_widget, simple_logger
  """;

    return MarkdownViewer(
      markdownDocument,
      imageBuilder: (uri, imageInfo) {
        // debugPrint("uri: $uri, imageInfo: $imageInfo");
        return _imageBuilder(uri);
      },
      onTapLink: (href, title) {
        if (href != null) {
          var url = Uri.parse(href!);
          launchUrl(url);
        }
        // debugPrint("onTapLink: $href, $title");
      },
    );
  }

  Widget _imageBuilder(Uri uri) {
    var logger = SimpleLogger();
    logger.info("uri: $uri");

    String scheme = uri.scheme;
    if (scheme == "icon") {
      int? iconID = int.tryParse(uri.authority, radix: 16);
      if (iconID != null) {
        return Icon(IconData(iconID, fontFamily: 'MaterialIcons'));
      } else {
        return Text(uri.toString());
      }
    }

    return const Text("undefined");
  }
}

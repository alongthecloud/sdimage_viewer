import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:simple_logger/simple_logger.dart';
import 'package:url_launcher/url_launcher.dart';

class HelpView extends StatelessWidget {
  const HelpView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text("Help")),
        body: Container(
            margin: const EdgeInsets.all(24), child: _helpDocument(context)));
  }

  String _getMarkdownDocument() {
    String markdownDocument = """
  # About this app

  This app shows images generated by StableDiffusion (A1111) with meta-data.

  https://github.com/alongthecloud/sdimage_viewer

  ### Functions of buttons

  * ![help](icon://help) : Show this help.
  * ![open-shell](icon://open_in_browser) : Open the current image in Explorer or Finder

  * Keyboard shortcuts
  * The Left Arrow, Right Arrow, Home, and End Key moves to the previous image, next image, first image, and last image.
  * The Up arrow key moves to an image 10 steps previous, The Down arrow key moves to an image 10 steps next.

  ### Used flutter libraries
    clipboard,desktop_drop,expandable_text,flutter_markdown,get,image,oktoast,path_provider,settings_ui,simple_logger,window_manager ...

  """;

    return markdownDocument;
  }

  Widget _helpDocument(BuildContext context) {
    return Markdown(
        data: _getMarkdownDocument(),
        onTapLink: (text, href, title) {
          if (href == null) return;

          Uri uri = Uri.parse(href!);
          launchUrl(uri);
        },
        imageBuilder: _imageBuilder,
        softLineBreak: true);
  }

  Widget _imageBuilder(Uri uri, String? title, String? alt) {
    var logger = SimpleLogger();
    logger.info(
        "uri: $uri, uri.authority : ${uri.authority} title: $title, alt: $alt");

    String scheme = uri.scheme;
    if (scheme == "icon") {
      switch (uri.authority) {
        case "help":
          return const Icon(Icons.help);
        case "settings":
          return const Icon(Icons.settings);
        case "save":
          return const Icon(Icons.save);
        case "open_in_browser":
          return const Icon(Icons.open_in_browser);
        default:
          {
            return Text("icon:${uri.authority}");
          }
      }
    }

    return Text(alt ?? uri.authority);
  }
}
